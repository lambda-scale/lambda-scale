syntax = "proto3";

package signal;

enum RequestType {
    // client2host

    ExecuteAfterLoad = 0;
    Execute = 1;
    Load = 2;
    Unload = 3;
    ExecuteAfterP2PLoad = 4;

    // client2host

    SendModel = 5;

    // host2host
    H2HfetchModel = 6;

    H2HSendModelMetaData = 7;
    H2HSendModelData = 8;

    // broadcast
    StartBroadCast = 9;
    BroadCast = 10;
    ExcuteAfterBroadCast = 11;

    // test
    ExecuteForRecord = 12;
    Replay = 13;
}

message SignalRequest {
    RequestType type = 1;
    string function = 2;
    string payload = 3;
    
    // Host to Host
    ModelMetaInfoProto meta_data = 4;
    ModelParamGroupProto param_data = 5;

    // BroadCast
    StartBroadCastInfoProto start_broad_cast_info = 6;
    BroadCastInfoProto     broad_cast_info = 7;
}

message ModelMetaInfoProto{
    ModelAccessOrderMapProto model_access_order_map = 1;
    VirtualDataBlockMapInfoProto virtual_data_block_map_info = 2;

    repeated ModelParamInfoProto model_param_info = 3;
    repeated GeneralBlockInfoProto general_block_info = 4;
    repeated ModelBlockInfoProto model_block_info = 5; 
}

message ModelTransferParamGroupInfoProto{
    int32 group_count = 1;
    repeated int32 start_idx = 2;
    repeated int32 finish_idx = 3;
}

message ModelAccessOrderMapProto{
    repeated uint64 v_param_ptrs = 1;
}

message ModelParamInfoProto{
    uint64 v_param_ptr = 1;
    int32 size = 2;
}

message ModelParamProto{
    bytes param = 1;
    int32 index = 2;
}

message ModelParamGroupProto{
    repeated ModelParamProto param_group = 1;
    int32 start_index = 2;
    int32 finish_index = 3;
}

message VirtualDataBlockMapInfoProto{
    repeated uint64 v_space_ptrs = 1;
    repeated uint64 v_block_ptrs = 2; 
}

message GeneralBlockInfoProto{
    uint64 v_block_ptr = 1;
    int32 size = 2;
    bool is_model = 3;
}

message ModelBlockInfoProto{
    uint64 v_block_ptr = 1;
    repeated uint64 related_param_ptrs = 2;
}

message NodeDataInfoProto{
    int32 node_id = 1;
    int32 node_count = 2;
    repeated string address_list = 3;
}

message StartBroadCastInfoProto{
    NodeDataInfoProto node_data = 1;
}

message BroadCastInfoProto{
    bool is_meta_data = 1;
    BroadCastMetaDataProto broad_cast_meta_data = 2;
    BroadCastParamGroupDataProto broad_cast_param_data = 3;
}

message BroadCastMetaDataProto{
    NodeDataInfoProto node_data = 1;
    ModelMetaInfoProto meta_data = 2;
    ModelTransferParamGroupInfoProto transfer_param_group_info = 3;
}

message BroadCastParamGroupDataProto{
    int32 group_index = 1;
    ModelParamGroupProto param_data = 2;
}

enum AckType {
    OK = 0;
    Inavail = 1;
}

message SignalAck {
    AckType ack = 1; 
    int32 resp = 2;
}